name: PR自动检查与合并

# 权限配置 - 需要更多权限来执行合并操作
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-check:
    runs-on: ubuntu-latest
    steps:
      - name: 调试权限和环境信息
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 调试信息:');
            console.log('Repository:', context.repo);
            console.log('Event:', context.eventName);
            console.log('Actor:', context.actor);
            console.log('PR Number:', context.issue.number);

            // 检查权限
            try {
              const repo = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log('✅ 仓库访问权限正常');
              console.log('仓库权限:', repo.data.permissions);
            } catch (error) {
              console.log('❌ 仓库访问权限检查失败:', error.message);
            }

            // 测试评论权限
            try {
              const testComment = await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🤖 权限测试：GitHub Actions 可以正常创建评论'
              });
              console.log('✅ 评论权限正常');
            } catch (error) {
              console.log('❌ 评论权限检查失败:', error.message);
              console.log('错误详情:', error);
            }

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取PR信息
        id: pr-info
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "head_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT

      - name: 检查文件变更
        id: check-files
        run: |
          # 获取变更的文件列表
          git fetch origin ${{ steps.pr-info.outputs.base_branch }}
          CHANGED_FILES=$(git diff --name-only origin/${{ steps.pr-info.outputs.base_branch }}...HEAD)
          echo "变更的文件："
          echo "$CHANGED_FILES"
          
          # 检查是否只有文档文件变更
          NON_DOC_FILES=$(echo "$CHANGED_FILES" | grep -v -E '\.(md|txt|rst|doc|docx|pdf)$' | grep -v '^docs/' | grep -v '^README' | grep -v '^CHANGELOG' | grep -v '^LICENSE' || true)
          
          if [ -z "$NON_DOC_FILES" ]; then
            echo "only_docs=true" >> $GITHUB_OUTPUT
            echo "检测到仅有文档文件变更"
          else
            echo "only_docs=false" >> $GITHUB_OUTPUT
            echo "检测到非文档文件变更："
            echo "$NON_DOC_FILES"
          fi

      - name: 设置Node.js环境
        if: steps.check-files.outputs.only_docs == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'

      - name: 安装依赖
        if: steps.check-files.outputs.only_docs == 'false'
        run: |
          npm install
          cd client && npm install
          cd ../server && npm install

      - name: TypeScript类型检查
        if: steps.check-files.outputs.only_docs == 'false'
        id: type-check
        run: |
          echo "开始TypeScript类型检查..."
          
          # 检查server端
          echo "检查server端TypeScript..."
          cd server
          if npx tsc --noEmit; then
            echo "server_check=success" >> $GITHUB_OUTPUT
            echo "✅ Server端TypeScript检查通过"
          else
            echo "server_check=failed" >> $GITHUB_OUTPUT
            echo "❌ Server端TypeScript检查失败"
            exit 1
          fi
          
          cd ..
          
          # 检查client端
          echo "检查client端TypeScript..."
          cd client
          if npx tsc --noEmit; then
            echo "client_check=success" >> $GITHUB_OUTPUT
            echo "✅ Client端TypeScript检查通过"
          else
            echo "client_check=failed" >> $GITHUB_OUTPUT
            echo "❌ Client端TypeScript检查失败"
            exit 1
          fi
          
          echo "type_check_result=success" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 处理TypeScript检查失败
        if: steps.check-files.outputs.only_docs == 'false' && steps.type-check.outputs.type_check_result != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ TypeScript类型检查失败

            您的PR包含TypeScript类型错误，请修复后重新提交。

            ### 检查结果：
            - Server端检查：${{ steps.type-check.outputs.server_check == 'success' && '✅ 通过' || '❌ 失败' }}
            - Client端检查：${{ steps.type-check.outputs.client_check == 'success' && '✅ 通过' || '❌ 失败' }}

            ### 本地检查命令：
            \`\`\`bash
            # 安装依赖
            npm run install:all

            # 运行完整检查
            npm run check-types

            # 或者分别检查
            cd server && npx tsc --noEmit
            cd client && npx tsc --noEmit
            \`\`\`

            ### 常见问题：
            - 检查类型定义是否正确
            - 确保所有导入路径正确
            - 移除未使用的变量和导入

            修复所有类型错误后，请重新推送代码。`;

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('✅ 已创建错误提示评论');
            } catch (error) {
              console.log('❌ 创建评论失败，但检查结果已记录:', error.message);
            }

      - name: 处理纯文档变更
        if: steps.check-files.outputs.only_docs == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 📝 文档变更检测

            检测到您的PR仅包含文档文件变更，无需进行代码检查。

            此PR正在等待项目维护者的最终审核。感谢您对文档的贡献！ 🎉

            ### 变更类型：
            - 📄 文档文件更新
            - ✅ 跳过代码检查
            - ⏳ 等待人工审核`;

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('✅ 已创建文档变更提示评论');
            } catch (error) {
              console.log('❌ 创建评论失败，但文档变更已检测:', error.message);
            }

      - name: 检查合并权限
        if: steps.check-files.outputs.only_docs == 'false' && steps.type-check.outputs.type_check_result == 'success'
        id: check-permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.issue.number;

            try {
              // 检查PR详情
              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: prNumber
              });

              console.log('PR状态:', pr.data.state);
              console.log('可合并状态:', pr.data.mergeable);
              console.log('合并状态检查:', pr.data.mergeable_state);

              // 检查是否可以合并
              if (pr.data.state !== 'open') {
                console.log('❌ PR不是开放状态');
                return { canMerge: false, reason: 'PR不是开放状态' };
              }

              if (pr.data.mergeable === false) {
                console.log('❌ PR存在合并冲突');
                return { canMerge: false, reason: '存在合并冲突' };
              }

              console.log('✅ PR可以合并');
              return { canMerge: true, pr: pr.data };

            } catch (error) {
              console.log('❌ 权限检查失败:', error.message);
              return { canMerge: false, reason: error.message };
            }

      - name: 创建成功评论（无自动合并）
        if: steps.check-files.outputs.only_docs == 'false' && steps.type-check.outputs.type_check_result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.issue.number;
            const baseBranch = '${{ steps.pr-info.outputs.base_branch }}';

            // 确定目标分支逻辑
            let targetBranch = 'feature';
            let branchMessage = '';

            if (baseBranch === 'main') {
              branchMessage = '\n⚠️ **注意**: 您的PR目标是main分支，建议项目维护者将其合并到feature分支进行测试。';
            } else if (baseBranch === 'feature') {
              branchMessage = '\n✅ **目标分支**: 您的PR正确地指向了feature分支。';
            }

            const comment = `## ✅ 自动化检查通过

            您的PR已通过所有自动化检查！

            ### 检查结果：
            - TypeScript类型检查：✅ 通过
            - Server端检查：✅ 通过
            - Client端检查：✅ 通过
            ${branchMessage}

            ### 下一步：
            项目维护者将审核您的代码并决定合并策略：
            - 如果目标是main分支，将先合并到feature分支进行测试
            - 测试通过后会合并到主分支并在下个版本发布时加入

            感谢您的贡献！ 🎉

            ---
            *注：由于GitHub权限限制，暂时无法自动合并，需要维护者手动操作。*`;

            try {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner,
                repo,
                body: comment
              });
              console.log('✅ 成功创建评论');
            } catch (error) {
              console.log('❌ 创建评论失败:', error.message);
              // 如果评论失败，至少在日志中记录成功信息
              console.log('🎉 TypeScript检查通过，但无法创建评论');
            }
