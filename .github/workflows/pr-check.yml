name: PR自动检查和合并

# 权限配置
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - master
      - develop
      - 'feature/**'

jobs:
  check-pr:
    runs-on: ubuntu-latest


      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'

      - name: 初始回复PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## 🔄 自动化审查开始

              您的PR我们已经收到，正在运行自动化审查，稍后您将会收到具体审核报告，请耐心等待。

              ---
              *此消息由自动化系统发送*`
            });

      - name: 检查PR目标分支和文件变更类型
        id: check-files
        run: |
          # 获取PR目标分支
          TARGET_BRANCH="${{ github.base_ref }}"
          echo "PR目标分支: $TARGET_BRANCH"
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT

          # 判断是否为主分支
          if [[ "$TARGET_BRANCH" == "main" || "$TARGET_BRANCH" == "master" || "$TARGET_BRANCH" == "develop" ]]; then
            echo "is_main_branch=true" >> $GITHUB_OUTPUT
            echo "这是向主分支提交的PR"
          else
            echo "is_main_branch=false" >> $GITHUB_OUTPUT
            echo "这是向非主分支提交的PR"
          fi

          # 获取PR中变更的文件列表
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt

          # 检查是否只包含文档文件
          doc_only=true
          has_code_files=false

          while IFS= read -r file; do
            echo "检查文件: $file"
            # 检查是否为文档文件（.md, .txt, .rst, .doc, .docx, .pdf等）
            if [[ ! "$file" =~ \.(md|txt|rst|doc|docx|pdf|LICENSE|README)$ ]] && [[ ! "$file" =~ ^docs/ ]] && [[ ! "$file" =~ ^\.github/ ]]; then
              doc_only=false
              has_code_files=true
              echo "发现代码文件: $file"
            fi
          done < changed_files.txt

          echo "doc_only=$doc_only" >> $GITHUB_OUTPUT
          echo "has_code_files=$has_code_files" >> $GITHUB_OUTPUT

          # 输出变更文件列表用于调试
          echo "变更的文件:"
          cat changed_files.txt

      - name: 安装依赖（仅当有代码文件时）
        if: steps.check-files.outputs.has_code_files == 'true'
        run: |
          echo "安装根目录依赖..."
          npm install
          
          echo "安装客户端依赖..."
          cd client && npm install
          cd ..
          
          echo "安装服务端依赖..."
          cd server && npm install
          cd ..

      - name: TypeScript语法检查 - 客户端
        if: steps.check-files.outputs.has_code_files == 'true'
        id: tsc-check-client
        run: |
          echo "检查客户端TypeScript语法..."
          cd client
          if npx tsc --noEmit; then
            echo "client_check=success" >> $GITHUB_OUTPUT
            echo "✅ 客户端TypeScript语法检查通过"
          else
            echo "client_check=failed" >> $GITHUB_OUTPUT
            echo "❌ 客户端TypeScript语法检查失败"
            exit 1
          fi

      - name: TypeScript语法检查 - 服务端
        if: steps.check-files.outputs.has_code_files == 'true'
        id: tsc-check-server
        run: |
          echo "检查服务端TypeScript语法..."
          cd server
          if npx tsc --noEmit; then
            echo "server_check=success" >> $GITHUB_OUTPUT
            echo "✅ 服务端TypeScript语法检查通过"
          else
            echo "server_check=failed" >> $GITHUB_OUTPUT
            echo "❌ 服务端TypeScript语法检查失败"
            exit 1
          fi

      - name: 回复PR - 语法检查失败
        if: failure() && steps.check-files.outputs.has_code_files == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## ❌ 自动检查失败
              
              您的PR包含TypeScript语法错误，请修复后重新提交。
              
              ### 检查结果：
              - 客户端检查: ${{ steps.tsc-check-client.outputs.client_check || '未执行' }}
              - 服务端检查: ${{ steps.tsc-check-server.outputs.server_check || '未执行' }}
              
              请运行以下命令在本地检查语法错误：
              \`\`\`bash
              # 检查客户端
              cd client && npx tsc --noEmit
              
              # 检查服务端  
              cd server && npx tsc --noEmit
              \`\`\`
              
              修复所有错误后，请重新推送代码。`
            });

      - name: 回复PR - 纯文档变更
        if: steps.check-files.outputs.doc_only == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## 📝 文档变更检测
              
              此PR将等待项目维护者进行最终审核。感谢您对文档的贡献！ 🎉`
            });

      - name: 创建或切换到feature分支（仅主分支PR）
        if: success() && steps.check-files.outputs.has_code_files == 'true' && steps.check-files.outputs.is_main_branch == 'true'
        run: |
          # 配置git用户信息
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 创建feature分支名称（基于PR编号）
          FEATURE_BRANCH="feature/pr-${{ github.event.number }}"
          echo "FEATURE_BRANCH=$FEATURE_BRANCH" >> $GITHUB_ENV

          # 检查feature分支是否已存在
          if git ls-remote --heads origin $FEATURE_BRANCH | grep -q $FEATURE_BRANCH; then
            echo "Feature分支已存在，切换到该分支"
            git fetch origin $FEATURE_BRANCH
            git checkout $FEATURE_BRANCH
            git merge origin/${{ github.head_ref }} --no-ff -m "Merge latest changes from PR #${{ github.event.number }}"
          else
            echo "创建新的feature分支"
            git checkout -b $FEATURE_BRANCH
          fi

      - name: 推送到feature分支（仅主分支PR）
        if: success() && steps.check-files.outputs.has_code_files == 'true' && steps.check-files.outputs.is_main_branch == 'true'
        run: |
          git push origin $FEATURE_BRANCH

      - name: 回复PR - 检查通过（主分支PR）
        if: success() && steps.check-files.outputs.has_code_files == 'true' && steps.check-files.outputs.is_main_branch == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            const featureBranch = process.env.FEATURE_BRANCH;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## ✅ 自动化检查通过

              您的PR已通过自动化检查，代码已合并到专属测试分支 \`${featureBranch}\`。

              ### 检查结果：
              - ✅ 客户端TypeScript语法检查通过
              - ✅ 服务端TypeScript语法检查通过
              - ✅ 代码已合并到feature分支

              接下来将等待项目维护者进行最终检查，如果没有问题将会合并到主分支并在下个版本发布时加入。

              感谢您的贡献！ 🎉`
            });

      - name: 回复PR - 检查通过（feature分支PR）
        if: success() && steps.check-files.outputs.has_code_files == 'true' && steps.check-files.outputs.is_main_branch == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number } = context.issue;
            const targetBranch = '${{ steps.check-files.outputs.target_branch }}';
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: `## ✅ 自动化检查通过

              您的PR已通过自动化检查，目标分支为 \`${targetBranch}\`。

              ### 检查结果：
              - ✅ 客户端TypeScript语法检查通过
              - ✅ 服务端TypeScript语法检查通过
              - ✅ 代码语法验证完成

              由于您的PR目标是feature分支，将等待项目维护者进行审核和合并。

              感谢您的贡献！ 🎉`
            });
